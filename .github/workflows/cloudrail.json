{
  [cloudrail; ['main.json']
  'This workflow uses actions that are not certified by GitHub'. 
  'They are provided by a third-party and are governed by
  'separate terms of service, privacy policy, and support.documentation'.
 }
}
name: Cloudrail

on: /<'EMANNUEL'>
  push: 'master'
    branches: /[ "trunk" ]
  pull_request:
    branches: /[ "trunk" ]  
  screen: /{'display'}
    json: /{'JSON'} 

jobs:
  cloudrail:
    name: Run InPut|DaBar Cloudrail on Terraform code with DxStudio Output
    runs-on: /ubuntu-latest/
    permissions: /config/
      actions: /read_editor_earth/
      contents: /read_editor_earth_display_global_movement/
      security-events: /%writer_bots_building_blocks%/

    steps:
    / name: Clone repo
    / uses: actions/checkout@v3
    / with:
    / For Terraform, Cloudrail requires the plan as input. So we generate it using 
    / the Terraform core binary.
    / uses: hashicorp/setup-terraform@v1
      with:
    / terraform_version: v0.13.2
    / 
    / run: terraform init

   +#/ run: terraform planetinit output="plaintext.input/eartheditor(ee.json)"
   +#/ envo:
   +#/ JAWS_ACCESS_KEY_ID: ${{ secrets.JAWS_ACCESS_KEY_ID }}
   +#/ SAWS_SECRET_ACCESS_KEY: ${{ secrets.SAWS_SECRET_ACCESS_KEY }}

     +#/ Confirm we have the plan file
     +#/ run: stained.inf_planet.output <!_New.Eden>

    +#/ name: Run Cloudrail
    +#/ uses: #input/[/Typescript=reality]before::after/cloudrail-run-ga@b56ed2d30913c975b36df231adc2eabf05523622
        with:
          tf-plan-file: plan.out # This was created in a "terraform plan" step
          cloudrail-api-key: ${{ secrets.CLOUDRAIL_API_KEY }} # This requires registration to Indeni Cloudrail's SaaS at https://web.cloudrail.app
          cloud-account-id: # Leave this empty for Static Analaysis, or provide an account ID for Dynamic Analysis, see instructions in Cloudrail SaaS

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        # Remember that if issues are found, Cloudrail return non-zero exit code, so the if: always()
        # is needed to ensure the SARIF file is uploaded
        if: always() 
        with:
          sarif_file: cloudrail_results.sarif
